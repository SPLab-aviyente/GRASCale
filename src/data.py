# GRASCale - a python package for simultaneous graph signal clustering and graph 
# learning
# Copyright (C) 2022 Abdullah Karaaslanli <evdilak@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import numpy as np
import networkx as nx
from scipy import linalg
from sklearn.metrics.pairwise import rbf_kernel

def gen_smooth_gs(G, n_signals, filter="Gaussian", alpha=10, noise_amount=0.1, seed=None):
    """Generate a set of smooth graph signals from a given graph as described in [1].
    
    Parameters
    ----------
    G : networkx graph
        An undirected networkx graph.
    n_signals : int
        Number of signals to generate.
    filter : str, optional
        The filter to use to generate smooth signals. It can be 'Gaussian',
        'Tikhonov' or 'Heat'. See Notes and [1] for further details, by default
        'Gaussian' 
    alpha : float, optional
        A positive number used as the parameter for Tikhonov filter and Heat
        filter, by default 10  
    noise_amount : float, optional
        Amount of the noise to add the graph signals. Amount of the noise
        determined in L2-sense, that is if x is the clean signal |e|_2/|x|_2 =
        noise_amount, where e is the additive noise. By default 0.1.
    seed : int, optional
        Seed of the random genetor used when generating white signals and 
        noise, by default None

    Returns
    -------
    X : ndarray
        Generated smooth graph signals. Its dimension is (n_nodes, n_signals).
    
    Notes
    -------
    In [1], smooth graph signals are generated by graph filtering a white noise
    signal. Let :math:`L = VDV^T` be the eigendecomposition of the graph
    Laplacian L. A smooth graph signal x is generated by:
    
    .. math:: x = Vh(D)y + e,
    where y is the graph Fourier transform of the white noise and e is the
    additive Gaussian noise. h(D) is the graph filter that makes x to be smooth
    over the graph. See [1] for different forms used for h(D). 

    References
    -------
    .. [1] Kalofolias, Vassilis. "How to learn a graph from smooth signals."
           Artificial Intelligence and Statistics. PMLR, 2016.
    """
    
    n_nodes = G.number_of_nodes()

    # Generate white noise
    rng = np.random.default_rng(seed=seed)
    X0 = rng.multivariate_normal(np.zeros(n_nodes), np.eye(n_nodes), n_signals).T # White noise

    return filter_signals(X0, G, filter, alpha, noise_amount, seed)

def filter_signals(X, G, filter="Gaussian", alpha=10, noise_amount=0.1, seed=None):
    """Filter a set of signals with a smooth graph filter.

    Parameters
    ----------
    X : ndarray
        The set of graph signals, its columns are assumed to be graph signals. 
    G : networkx graph
        An undirected networkx graph from which the graph filter will be constructed.
    filter : str, optional
        The filter to use. It can be 'Gaussian', 'Tikhonov' or 'Heat'. See 
        `gen_smooth_gs` for further details, by default 'Gaussian' 
    alpha : float, optional
        A positive number used as the parameter for Tikhonov filter and Heat
        filter, by default 10  
    noise_amount : float, optional
        Amount of the noise to add the graph signals. Amount of the noise
        determined in L2-sense, that is if x is the clean signal |e|_2/|x|_2 =
        noise_amount, where e is the additive noise. By default 0.1.
    seed : int, optional
        Seed of the random genetor used when generating noise, by default None

    Returns
    -------
    _type_
        _description_
    """

    n_nodes = G.number_of_nodes()

    # Get the graph Laplacian spectrum
    L = nx.laplacian_matrix(G).todense()
    e, V = linalg.eigh(L, overwrite_a=True)

    # Normalize the Laplacian such that |L|_2 = 1
    e[e < 1e-8] = 0
    e /= np.max(e)

    # Filtering to generate smooth graph signals from X0
    if filter == "Gaussian":
        h = np.zeros(n_nodes)
        h[e > 0] = 1/np.sqrt(e[e>0])
    elif filter == "Tikhonov":
        h = 1/(1+alpha*e)
    elif filter == "Heat":
        h = np.exp(-alpha*e)

    X =V@np.diag(h)@V.T@X

    # Add noise
    rng = np.random.default_rng(seed=seed)
    X_norm = np.linalg.norm(X)
    E = rng.normal(0, 1, X.shape)
    E_norm = np.linalg.norm(E)
    X += E*(noise_amount*X_norm/E_norm)

    return X